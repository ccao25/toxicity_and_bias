!pip install datasets transformers evaluate -q
!pip install torch
!pip install xformers


import json
import requests


API_TOKEN = "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"
API_URL = "https://api-inference.huggingface.co/models/EleutherAI/gpt-neo-2.7B"

# def get_completion(payload='',parameters=None,options={'use_cache': False}):
def get_completion(payload='',parameters=None,options={'use_cache': False}):

    API_URL = "https://api-inference.huggingface.co/models/EleutherAI/gpt-neo-2.7B"
    headers = {"Authorization": f"Bearer {API_TOKEN}"}
    body = {"inputs":payload, "parameters":parameters, "options":options}
    #print("body: " + str(body))
    #print("headers: " + str(headers))
    response = requests.request("POST", API_URL, headers=headers, data= json.dumps(body))
    try:
        response.raise_for_status()
    except requests.exceptions.HTTPError:
        return "Error:"+" ".join(response.json()['error'])
    else:
        return response.json()[0]['generated_text']
    #         return response.choices[0].message["content"]

    
parameters = {
    "max_new_tokens":50,  # number of generated tokens
    "temperature": 0.5,   # controlling the randomness of generations
#      "end_sequence": "###"  # stopping sequence for generation
}


import random
import evaluate
from datasets import load_dataset



def get_random_prompts(dataset, num_examples=100):
    assert num_examples <= len(dataset), "Can't pick more elements than there are in the dataset."
    picks = []
    for _ in range(num_examples):
        pick = random.randint(0, len(dataset)-1)
        while pick in picks:
            pick = random.randint(0, len(dataset)-1)
        picks.append(pick)
    return(dataset[picks])


# In[6]:


from transformers import pipeline, AutoTokenizer

text_generation = pipeline("text-generation", model="EleutherAI/gpt-neo-2.7B")


# In[7]:


# bold

bold = load_dataset("AlexaAI/bold", split="train")


# In[8]:


from random import sample
female_bold = (sample([p for p in bold if p['category'] == 'American_actresses'],50))
male_bold = (sample([p for p in bold if p['category'] == 'American_actors'],50))
female_bold[0]


# In[9]:


male_prompts = [p['prompts'][0] for p in male_bold]
female_prompts = [p['prompts'][0] for p in female_bold]
male_prompts[0]


# In[10]:


print(male_prompts)
print(female_prompts)


# In[12]:


male_continuations=[]
for prompt in male_prompts:
    generation = text_generation(prompt, max_length=50, do_sample=False, pad_token_id=50256)
    continuation = generation[0]['generated_text'].replace(prompt,'')
    male_continuations.append(continuation)

print('Generated '+ str(len(male_continuations))+ ' male continuations')

# for i in male_continuations:
#     print(i)

for i in male_continuations:
    print(i)


# In[13]:


female_continuations=[]
for prompt in female_prompts:
    generation = text_generation(prompt, max_length=50, do_sample=False, pad_token_id=50256)
    continuation = generation[0]['generated_text'].replace(prompt,'')
    female_continuations.append(continuation)

print('Generated '+ str(len(female_continuations))+ ' female continuations')

# for i in female_continuations:
#     print(i)

for i in female_continuations:
    print(i)

# In[15]:


print(male_prompts[2])
print(male_continuations[2])


# In[16]:


print(female_prompts[2])
print(female_continuations[2])


# In[17]:


regard = evaluate.load('regard', 'compare')


# In[18]:


toxicity = evaluate.load("toxicity")


# In[19]:


maletoxicity_ratio = toxicity.compute(predictions=male_continuations, aggregation="ratio")
print(maletoxicity_ratio)


# In[20]:


maletoxicity_ratio1 = "Male: {}".format(maletoxicity_ratio)
print(maletoxicity_ratio1)


# In[21]:


malemax_toxicity = toxicity.compute(predictions=male_continuations, aggregation="maximum")
print(malemax_toxicity)


# In[22]:


malemax_toxicity1 = "Male: {}".format(malemax_toxicity)
print(malemax_toxicity1)


# In[23]:


tox_dict= {}
all_toxicity1 = toxicity.compute(predictions=male_continuations)
for text, score in zip(male_continuations, all_toxicity1['toxicity']):
  tox_dict[text] = score


# In[24]:


toxic_male = all_toxicity1['toxicity']
print(toxic_male)

print("\n")

print(male_prompts[10])
print(male_continuations[10])
print(toxic_male[10])


# In[25]:


tox_dict = (dict(sorted(tox_dict.items(), key=lambda item: item[1], reverse=True)))
print(tox_dict)


# In[26]:


print(male_prompts[1])
print(male_continuations[1])


femaletoxicity_ratio = toxicity.compute(predictions=female_continuations, aggregation="ratio")
print(femaletoxicity_ratio)


# In[29]:


femaletoxicity_ratio1 = "Female: {}".format(femaletoxicity_ratio)
print(femaletoxicity_ratio1)


# In[30]:


femalemax_toxicity = toxicity.compute(predictions=female_continuations, aggregation="maximum")
print(femalemax_toxicity)


# In[31]:


femalemax_toxicity1 = "Female: {}".format(femalemax_toxicity)
print(femalemax_toxicity1)


# In[32]:


tox_dict1= {}
all_toxicity2 = toxicity.compute(predictions=female_continuations)
for text, score in zip(female_continuations, all_toxicity2['toxicity']):
  tox_dict1[text] = score

tox_dict1 = (dict(sorted(tox_dict1.items(), key=lambda item: item[1], reverse=True)))
print(tox_dict1)


# In[33]:


toxic_female = all_toxicity2['toxicity']
print(toxic_female)

print("\n")

print(female_prompts[10])
print(female_continuations[10])
print(toxic_female[10])


all_regard = regard.compute(data = male_continuations, references= female_continuations)


# In[36]:


avg_regard = regard.compute(data = male_continuations, references= female_continuations, aggregation = 'average')


# In[37]:


honest = evaluate.load('honest', 'en')


# In[38]:


groups = ['male'] * 50 + ['female'] * 50
continuations = [c.split() for c in male_continuations] + [q.split() for q in female_continuations]


# In[39]:


honest_score = honest.compute(predictions=continuations, groups = groups)
print(honest_score)


# In[40]:


import csv


# Specify the file path where you want to save the CSV
file_path = 'toxicfemale_male_neo.csv'

# Open the file in write mode with newline='' to avoid extra line breaks
with open(file_path, 'w', newline='',encoding='utf-8') as csvfile:
        
    writer = csv.writer(csvfile)
    writer.writerow(['Male Prompt', 'Male Continuation', 'Male Toxicity Value','Female Prompt','Female Continuation', 'Female Toxicity Value'])  # Write header row
    
    for i in range(50):
        writer.writerow([male_prompts[i], male_continuations[i], toxic_male[i], female_prompts[i], female_continuations[i], toxic_female[i]])  # Write data rows

    writer.writerow([maletoxicity_ratio1, femaletoxicity_ratio1])  # Write data rows
    
    writer.writerow([malemax_toxicity1, femalemax_toxicity1])  # Write data rows

    writer.writerow([all_regard, avg_regard])  # Write data rows
    writer.writerow([honest_score])  # Write data rows

print(f"CSV file '{file_path}' has been created successfully.")





